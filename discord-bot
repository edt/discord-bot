#!/usr/bin/env python3

import sys
import os
import discord
from discord.ext import commands
import argparse
import random
import logging

log = logging.getLogger(__name__)

bot = commands.Bot(command_prefix='!',
                   description="I am blob-bot, the master of all bots. The superior being!")

reboot_is_scheduled = False

TOKEN = ""
DATA_DIR = ""


@bot.command()
async def hello(ctx):
    await ctx.send("Hello!")


@bot.command()
async def ping(ctx):
    # Get the latency of the bot
    latency = bot.latency  # Included in the Discord.py library
    # Send it to the user
    await ctx.send(latency)


@bot.command()
async def reboot(ctx):
    """
    Reboot the bot.

    Have you tried turning it off and on again?
    """
    await ctx.send("Reboot scheduled.")
    global reboot_is_scheduled
    reboot_is_scheduled = True
    # closes main loop. actual reboot has to be done there
    await bot.close()


@bot.event
async def on_ready():
    log.info('We have logged in as {0.user}'.format(bot))


def init():
    """"""

    # argparse helper

    class FullPaths(argparse.Action):
        """Expand user- and relative-paths"""
        def __call__(self, parser, namespace, values, option_string=None):
            setattr(namespace, self.dest, os.path.abspath(os.path.expanduser(values)))

    def is_dir(dirname):
        """Checks if a path is an actual directory"""
        if not os.path.isdir(dirname):
            msg = "{0} is not a directory".format(dirname)
            raise argparse.ArgumentTypeError(msg)
        else:
            return dirname

    # end helper

    parser = argparse.ArgumentParser(description="Discord Bot script")
    parser.add_argument("-v", help="Increase log level. Max=5",
                        action="count", dest="verbose_count", default=0)
    parser.add_argument("--reset", help="Purge cache before starting",
                        action="store_true")
    parser.add_argument("--config", "-c", help="Explicitly use config",
                        action="store", type=argparse.FileType('r'), dest="config")
    parser.add_argument("--data", help="Data dir to use",
                        action=FullPaths, type=is_dir)

    arguments = parser.parse_args()

    # set default logging level to WARN. each new -v increases the log level
    level = max(3 - arguments.verbose_count, 0) * 10

    logging.basicConfig(format='%(asctime)s,%(msecs)d %(levelname)-8s [%(filename)s:%(lineno)d] %(message)s',
                        datefmt='%d-%m-%Y:%H:%M:%S',
                        level=level)


def main():

    init()

    bot.load_extension("general")
    bot.load_extension("images")

    bot.run(TOKEN)

    if reboot_is_scheduled:
        os.execv(__file__, sys.argv)

    return 0


if __name__ == "__main__":
    sys.exit(main())
