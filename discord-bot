#!/usr/bin/env python3

import argparse
import logging
import os
import random
import sys
import shutil
import discord
import time

import settings
from discord.ext import commands

log = logging.getLogger(__name__)

bot = commands.Bot(command_prefix='!',
                   description="I am blob-bot, the master of all bots. The superior being!")

startTime = time.time()

@bot.command()
async def hello(ctx):
    await ctx.send("Hello!")


@bot.command()
async def ping(ctx):
    # Get the latency of the bot
    latency = bot.latency  # Included in the Discord.py library
    # Send it to the user
    await ctx.send(latency)


@bot.command()
async def reboot(ctx):
    """
    Reboot the bot.

    Have you tried turning it off and on again?
    """
    await ctx.send("Reboot scheduled.")
    settings.config.restart_scheduled = True
    # closes main loop. actual reboot has to be done there
    await bot.close()

@bot.command()
async def status(ctx):
    """
    Give server/bot state.

    Given information include:
    Uptime
    Available disk space
    Available images
    """

    def get_uptime():
        """
        Returns the number of seconds since the program started.
        """
        # do return startTime if you just want the process start time
        return time.time() - startTime

    def uptime_to_str(secs):
        mins, secs = divmod(secs, 60)
        hours, mins = divmod(mins, 60)
        days, hours = divmod(hours, 24)
        return 'D:%d H:%02d M:%02d S:%02d' % (days, hours, mins, secs)

    def get_size(start_path = '.'):
        total_size = 0
        for dirpath, dirnames, filenames in os.walk(start_path):
            for f in filenames:
                fp = os.path.join(dirpath, f)
                # skip if it is symbolic link
                if not os.path.islink(fp):
                    total_size += os.path.getsize(fp)
        return total_size

    folder_size = get_size(settings.config.data_dir)
    disk_total, disk_used, disk_free = shutil.disk_usage(settings.config.data_dir)

    status_msg = """
    I am alive! But you already knew that....

    Uptime: {time}

    Static data: {data:6.4f} GB
    Free disk space: {disk:6.4f} GB
    """.format(data=folder_size / (1024.0**3),
             disk=(disk_free / (1024.0**3)),
             time=uptime_to_str(get_uptime()))

    await ctx.send(status_msg)


@bot.event
async def on_ready():
    log.info('We have logged in as {0.user}'.format(bot))


def init():
    """"""

    # argparse helper

    class FullPaths(argparse.Action):
        """Expand user- and relative-paths"""
        def __call__(self, parser, namespace, values, option_string=None):
            setattr(namespace, self.dest, str(os.path.abspath(os.path.expanduser(values))))

    def is_dir(dirname):
        """Checks if a path is an actual directory"""
        if not os.path.isdir(dirname):
            msg = "{0} is not a directory".format(dirname)
            raise argparse.ArgumentTypeError(msg)
        else:
            return dirname

    # end helper
    script_path = os.path.dirname(os.path.abspath( __file__ ))

    parser = argparse.ArgumentParser(description="Discord Bot script")
    parser.add_argument("-v", help="Increase log level. Max=5",
                        action="count", dest="verbose_count", default=0)
    parser.add_argument("--reset", help="Purge cache before starting",
                        action="store_true")
    parser.add_argument("--config", "-c", help="Explicitly use config",
                        action="store", type=argparse.FileType('r'), 
                        dest="config", default=str(os.path.join(script_path, "settings.ini")))
    parser.add_argument("--data", help="Data dir to use",
                        action=FullPaths, type=is_dir, 
                        default=os.path.join(script_path, "data"))

    arguments = parser.parse_args()

    settings.init(str(arguments.config.name))


    # set default logging level to WARN. each new -v increases the log level
    level = max(3 - arguments.verbose_count, 0) * 10

    logging.basicConfig(format='%(asctime)s,%(msecs)d %(levelname)-8s [%(filename)s:%(lineno)d] %(message)s',
                        datefmt='%d-%m-%Y:%H:%M:%S',
                        level=level)


def main():

    init()

    bot.load_extension("general")
    bot.load_extension("images")

    bot.run(settings.config.token)

    if settings.config.restart_scheduled:
        os.execv(__file__, sys.argv)

    return 0


if __name__ == "__main__":
    sys.exit(main())
