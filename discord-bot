#!/usr/bin/env python3

import argparse
import logging
import os
import sys
import discord
import traceback

import settings
from discord.ext import commands

log = logging.getLogger(__name__)

bot = commands.Bot(command_prefix='!',
                   description="I am blob-bot, the master of all bots. The superior being!")


@bot.command()
async def hello(ctx):
    await ctx.send("Hello!")


@bot.command()
async def ping(ctx):
    # Get the latency of the bot
    latency = bot.latency  # Included in the Discord.py library
    # Send it to the user
    await ctx.send(latency)


@bot.event
async def on_ready():
    log.info('We have logged in as {0.user}'.format(bot))


@bot.event
async def on_command_error(ctx, error):
    if isinstance(error, discord.ext.commands.errors.CommandNotFound):
        await ctx.send("```Command not found error: {}```".format(error))
        return
    raise error


@bot.event
async def on_error(event, *args, **kwargs):
    message = args[0]  # Gets the message object
    log.warning(traceback.format_exc())  # logs the error
    await bot.send_message(message.channel, "You caused an error! {}".format(message))


def init():
    """"""

    # argparse helper

    class FullPaths(argparse.Action):
        """Expand user- and relative-paths"""
        def __call__(self, parser, namespace, values, option_string=None):
            setattr(namespace, self.dest, str(os.path.abspath(os.path.expanduser(values))))

    def is_dir(dirname):
        """Checks if a path is an actual directory"""
        if not os.path.isdir(dirname):
            msg = "{0} is not a directory".format(dirname)
            raise argparse.ArgumentTypeError(msg)
        else:
            return dirname

    # end helper
    script_path = os.path.dirname(os.path.abspath(__file__))

    parser = argparse.ArgumentParser(description="Discord Bot script")
    parser.add_argument("-v", help="Increase log level. Max=5",
                        action="count", dest="verbose_count", default=0)
    parser.add_argument("--reset", help="Purge cache before starting",
                        action="store_true")
    parser.add_argument("--config", "-c", help="Explicitly use config",
                        action="store", type=argparse.FileType('r'),
                        dest="config", default=str(os.path.join(script_path, "settings.ini")))
    parser.add_argument("--data", help="Data dir to use",
                        action=FullPaths, type=is_dir,
                        default=os.path.join(script_path, "data"))

    arguments = parser.parse_args()

    settings.init(str(arguments.config.name))

    # set default logging level to WARN. each new -v increases the log level
    level = arguments.verbose_count * 10

    logging.basicConfig(format='%(asctime)s,%(msecs)d %(levelname)-8s [%(filename)s:%(lineno)d] %(message)s',
                        datefmt='%d-%m-%Y:%H:%M:%S',
                        level=level)

    logging.getLogger('discord').setLevel(logging.WARNING)


def main():

    init()

    log.info("Loading extensions")

    bot.load_extension("extensions.general")
    bot.load_extension("extensions.images")
    bot.load_extension("extensions.daily_reddit")

    log.info("Starting bot run")
    bot.run(settings.config.token)

    if settings.config.restart_scheduled:
        os.execv(__file__, sys.argv)

    return 0


if __name__ == "__main__":
    sys.exit(main())
